name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 488927146088
  SERVER_IMAGE: tokosa-server
  CLIENT_IMAGE: tokosa-client

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Set up test environment for server
        run: |
          cat <<EOF > server/.env
          DATABASE_URL=postgresql://postgres:admin@db:5432/test_main_testing_db
          JWT_SECRET=test-secret
          EOF

                - name: Install & Test Server
                  working-directory: server
                  run: |
                    npm ci

                - name: Build Server
                  working-directory: server
                  run: npm run build

                - name: Install & Test Client
                  working-directory: client
                  run: |
                    npm ci

                - name: Build Client
                  working-directory: client
                  run: npm run build

  deploy:
    name: Deploy to AWS Lightsail
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve AWS Account ID
        id: account
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag & Push Server Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker build -t $ECR_REGISTRY/tokosa-server:$IMAGE_TAG -f server/Dockerfile server
          docker push $ECR_REGISTRY/tokosa-server:$IMAGE_TAG
          echo "SERVER_IMAGE=$ECR_REGISTRY/tokosa-server:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, Tag & Push Client Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker build -t $ECR_REGISTRY/tokosa-client:$IMAGE_TAG -f client/Dockerfile client
          docker push $ECR_REGISTRY/tokosa-client:$IMAGE_TAG
          echo "CLIENT_IMAGE=$ECR_REGISTRY/tokosa-client:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Create containers.json
        run: |
          cat <<EOF > containers.json
          {
            "server": {
              "image": "${{ env.SERVER_IMAGE }}",
              "ports": { "3000": "HTTP" },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
                "JWT_SECRET": "${{ secrets.JWT_SECRET }}"
              }
            },
            "client": {
              "image": "${{ env.CLIENT_IMAGE }}",
              "ports": { "80": "HTTP" }
            }
          }
          EOF

      - name: Create public-endpoint.json
        run: |
          cat <<EOF > public-endpoint.json
          {
            "containerName": "server",
            "containerPort": 3000,
            "healthCheck": {
              "path": "/health",
              "successCodes": "200",
              "intervalSeconds": 15,
              "timeoutSeconds": 15,
              "healthyThreshold": 2,
              "unhealthyThreshold": 10
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name "${{ secrets.LIGHTSAIL_SERVICE_NAME }}" \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json \
            --region "${{ env.AWS_REGION }}"
