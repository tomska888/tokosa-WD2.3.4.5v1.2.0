name: CI/CD

on:
  push:
    branches: [ main ]

concurrency:
  group: tokosa-main
  cancel-in-progress: true

jobs:
  build_test_push_deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -------- Server: deps, migrate test DB (Neon), then tests --------
      - name: Install server deps
        working-directory: server
        run: npm ci

      - name: Migrate (Neon TEST DB)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: npm run migrate

      - name: Run server tests
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: test-secret
        run: npm test -- --run

      # -------- Client: deps + lint only --------
      - name: Install client deps
        working-directory: client
        run: npm ci

      - name: Lint client
        working-directory: client
        run: npm run lint

      # -------- AWS login to ECR --------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tags
        id: tags
        run: |
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # -------- Build & push SERVER image --------
      - name: Build & push server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/Dockerfile
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/tokosa-server:${{ steps.tags.outputs.sha }}
            ${{ steps.ecr.outputs.registry }}/tokosa-server:latest
          provenance: false

      # -------- Build & push CLIENT image --------
      - name: Build & push client
        uses: docker/build-push-action@v5
        with:
          context: .
          file: client/Dockerfile
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/tokosa-client:${{ steps.tags.outputs.sha }}
            ${{ steps.ecr.outputs.registry }}/tokosa-client:latest
          provenance: false

      # -------- Prod migration on Neon (DATABASE_URL) --------
      - name: Migrate (prod DB)
        working-directory: server
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npm run migrate

      # -------- Generate Lightsail specs & deploy --------
      - name: Prepare Lightsail deployment specs
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
          SHA: ${{ steps.tags.outputs.sha }}
          DB_URL: ${{ secrets.DATABASE_URL }}
          JWT: ${{ secrets.JWT_SECRET }}
          LS_SERVICE: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
        run: |
          cat > containers.json <<'JSON'
          {
            "server": {
              "image": "REGISTRY/tokosa-server:SHA",
              "ports": { "3000": "HTTP" },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "DB_URL",
                "JWT_SECRET": "JWT"
              }
            },
            "client": {
              "image": "REGISTRY/tokosa-client:SHA",
              "ports": { "80": "HTTP" },
              "environment": {
                "LIGHTSAIL_SERVICE_NAME": "LS_SERVICE"
              }
            }
          }
          JSON
          sed -i "s|REGISTRY|$REGISTRY|g; s|SHA|$SHA|g; s|DB_URL|$DB_URL|g; s|JWT|$JWT|g; s|LS_SERVICE|$LS_SERVICE|g" containers.json

          cat > public-endpoint.json <<'JSON'
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/healthz",
              "intervalSeconds": 10,
              "timeoutSeconds": 5,
              "healthyThreshold": 2,
              "unhealthyThreshold": 4,
              "successCodes": "200-499"
            }
          }
          JSON

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name "${{ secrets.LIGHTSAIL_SERVICE_NAME }}" \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json

      - name: Show deployment status
        run: aws lightsail get-container-services --service-name "${{ secrets.LIGHTSAIL_SERVICE_NAME }}"
