# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # Give the steps the permissions they need (for OIDC, ECR, etc.)
    permissions:
      contents: read
      id-token: write
      packages: write

    # Bring up a Postgres service for Vitest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: neondb_owner
          POSTGRES_PASSWORD: npg_iU3LqQO0fBrj
          POSTGRES_DB: neondb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U neondb_owner -d neondb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Point tests at the local Postgres service:
      TEST_DATABASE_URL: postgresql://neondb_owner:npg_iU3LqQO0fBrj@ep-mute-sunset-a2zclwba-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require
      # Your AWS/Lightsail settings:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: 488927146088
      LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ─── Run server tests with coverage ────────────────────────────
      - name: Run server tests (with coverage)
        run: npm run test:coverage --workspace server

      # ─── Run client lint & tests ──────────────────────────────────
      - name: Install client dependencies
        run: npm ci --workspace client

      - name: Lint client code
        run: npm run lint --workspace client

      - name: Run client tests
        run: npm test --workspace client

      - name: Install lightsailctl plugin
        run: |
          curl -Lo lightsailctl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl
          chmod +x lightsailctl
          sudo mv lightsailctl /usr/local/bin/

      # ─── Login to ECR ──────────────────────────────────────────────
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ─── Build & push Docker images ──────────────────────────────
      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Server image
          docker build -t $ECR_REGISTRY/tokosa-server:latest ./server
          docker push      $ECR_REGISTRY/tokosa-server:latest

          # Client image
          docker build -t $ECR_REGISTRY/tokosa-client:latest ./client
          docker push      $ECR_REGISTRY/tokosa-client:latest

      - name: Generate containers.json
        run: |
          cat <<EOF > containers.json
          {
            "server": {
              "image": "${{ steps.login-ecr.outputs.registry }}/tokosa-server:latest",
              "ports": { "3000": "HTTP" }
            },
            "client": {
              "image": "${{ steps.login-ecr.outputs.registry }}/tokosa-client:latest",
              "ports": { "80": "HTTP" }
            }
          }
          EOF

      - name: Generate public-endpoint.json
        run: |
          cat <<EOF > public-endpoint.json
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/"
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail push-container-image \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --label server \
            --image ${{ steps.login-ecr.outputs.registry }}/tokosa-server:latest

          aws lightsail push-container-image \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --label client \
            --image ${{ steps.login-ecr.outputs.registry }}/tokosa-client:latest

          aws lightsail create-container-service-deployment \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
