name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: 488927146088
      LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

        # ─── Run server tests & coverage ────────────────────────────
      - name: Setup Node.js for tests
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies for all workspaces
        run: npm ci

      - name: Run server tests (with coverage)
        run: npm run test:coverage --workspace server

      # ─── Run client lint & tests ───────────────────────────────
      - name: Install client deps
        run: npm ci --workspace client

      - name: Lint client code
        run: npm run lint --workspace client

      - name: Run client tests
        run: npm test --workspace client

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npm run build --workspace client

      - name: Build server
        run: npm run build --workspace server

      - name: Install lightsailctl plugin
        run: |
          curl -Lo lightsailctl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl
          chmod +x lightsailctl
          sudo mv lightsailctl /usr/local/bin/

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker images
        run: |
          docker build -t tokosa-server:latest ./server
          docker build -t tokosa-client:latest ./client
          docker tag tokosa-server:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-server:latest
          docker tag tokosa-client:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-client:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-server:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-client:latest

      - name: Generate containers.json
        run: |
          cat <<EOF > containers.json
          {
            "server": {
              "image": "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-server:latest",
              "ports": { "3000": "HTTP" }
            },
            "client": {
              "image": "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-client:latest",
              "ports": { "80": "HTTP" }
            }
          }
          EOF

      - name: Generate public-endpoint.json
        run: |
          cat <<EOF > public-endpoint.json
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/"
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail push-container-image --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --label server --image ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-server:latest
          aws lightsail push-container-image --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --label client --image ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/tokosa-client:latest
          aws lightsail create-container-service-deployment --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --containers file://containers.json --public-endpoint file://public-endpoint.json
