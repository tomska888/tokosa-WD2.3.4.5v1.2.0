# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write
      packages: write

    # Inject your test/prod‐DB URLs + JWT secret from GitHub Secrets:
    env:
      TEST_DATABASE_URL:     ${{ secrets.TEST_DATABASE_URL }}
      DATABASE_URL:          ${{ secrets.DATABASE_URL }}
      JWT_SECRET:            ${{ secrets.JWT_SECRET }}
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID:        ${{ secrets.AWS_ACCOUNT_ID }}
      LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER:     neondb_owner
          POSTGRES_PASSWORD: npg_iU3LqQO0fBrj
          POSTGRES_DB:       neondb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U neondb_owner -d neondb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install server dependencies
        run: npm ci --workspace server

      - name: Run server tests (with coverage)
        run: npm run test:coverage --workspace server

      - name: Install client dependencies
        run: npm ci --workspace client

      - name: Lint client code
        run: npm run lint --workspace client

      - name: Run client tests
        run: npm test --workspace client

      - name: Install lightsailctl plugin
        run: |
          curl -Lo lightsailctl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl
          chmod +x lightsailctl
          sudo mv lightsailctl /usr/local/bin/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build & push server
          docker build -t $ECR_REGISTRY/tokosa-server:latest ./server
          docker push      $ECR_REGISTRY/tokosa-server:latest

          # Build & push client
          docker build -t $ECR_REGISTRY/tokosa-client:latest ./client
          docker push      $ECR_REGISTRY/tokosa-client:latest

      - name: Generate containers.json
        run: |
          cat <<EOF > containers.json
          {
            "server": {
              "image": "${{ steps.login-ecr.outputs.registry }}/tokosa-server:latest",
              "ports": { "3000": "HTTP" },
              "environment": {
                "DATABASE_URL": "${{ env.DATABASE_URL }}",
                "JWT_SECRET":   "${{ env.JWT_SECRET }}"
              }
            },
            "client": {
              "image": "${{ steps.login-ecr.outputs.registry }}/tokosa-client:latest",
              "ports": { "80": "HTTP" }
            }
          }
          EOF

      - name: Generate public-endpoint.json
        run: |
          cat <<EOF > public-endpoint.json
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/"
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail push-container-image \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --label server \
            --image ${{ steps.login-ecr.outputs.registry }}/tokosa-server:latest

          aws lightsail push-container-image \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --label client \
            --image ${{ steps.login-ecr.outputs.registry }}/tokosa-client:latest

          aws lightsail create-container-service-deployment \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
